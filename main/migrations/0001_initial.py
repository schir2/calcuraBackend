# Generated by Django 5.1.4 on 2025-03-28 02:19

import django.db.models.deletion
import django_currentuser.db.models.fields
import django_currentuser.middleware
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brokerage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('growth_rate', models.FloatField(help_text='Annual growth rate as a percentage', verbose_name='Growth Rate')),
                ('initial_balance', models.FloatField(help_text='Initial balance in the investment account', verbose_name='Initial Balance')),
                ('contribution_strategy', models.CharField(choices=[('fixed', 'Fixed'), ('percentage_of_income', 'Percentage of Income'), ('max', 'Max')], default='fixed', max_length=50, verbose_name='Contribution Strategy')),
                ('contribution_percentage', models.FloatField(blank=True, help_text='Percentage of income contributed annually', null=True, verbose_name='Contribution Percentage')),
                ('contribution_fixed_amount', models.FloatField(blank=True, help_text='Fixed amount contributed annually', null=True, verbose_name='Contribution Fixed Amount')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'verbose_name': 'Brokerage ',
                'verbose_name_plural': 'Brokerages ',
            },
        ),
        migrations.CreateModel(
            name='BrokerageTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('growth_rate', models.FloatField(help_text='Annual growth rate as a percentage', verbose_name='Growth Rate')),
                ('initial_balance', models.FloatField(help_text='Initial balance in the investment account', verbose_name='Initial Balance')),
                ('contribution_strategy', models.CharField(choices=[('fixed', 'Fixed'), ('percentage_of_income', 'Percentage of Income'), ('max', 'Max')], default='fixed', max_length=50, verbose_name='Contribution Strategy')),
                ('contribution_percentage', models.FloatField(blank=True, help_text='Percentage of income contributed annually', null=True, verbose_name='Contribution Percentage')),
                ('contribution_fixed_amount', models.FloatField(blank=True, help_text='Fixed amount contributed annually', null=True, verbose_name='Contribution Fixed Amount')),
                ('description', models.TextField(blank=True, help_text='Description of the template for documentation purposes.', null=True, verbose_name='Template Description')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'verbose_name': 'Brokerage  Template',
                'verbose_name_plural': 'Brokerage  Templates',
            },
        ),
        migrations.CreateModel(
            name='CashReserve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('initial_amount', models.FloatField(help_text='The starting cash amount.', verbose_name='Initial Amount')),
                ('cash_reserve_strategy', models.CharField(choices=[('fixed', 'Fixed Cash Reserve'), ('variable', 'Variable Cash Reserve')], max_length=50, verbose_name='Cash Maintenance Strategy')),
                ('reserve_amount', models.FloatField(blank=True, help_text='The fixed cash reserve amount, if applicable.', null=True, verbose_name='Reserve Amount')),
                ('reserve_months', models.PositiveIntegerField(blank=True, help_text='The number of months of cash to maintain in reserve.', null=True, verbose_name='Reserve Months')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'verbose_name': 'Cash Reserve',
                'verbose_name_plural': 'Cash Reserves',
            },
        ),
        migrations.CreateModel(
            name='CashReserveTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('initial_amount', models.FloatField(help_text='The starting cash amount.', verbose_name='Initial Amount')),
                ('cash_reserve_strategy', models.CharField(choices=[('fixed', 'Fixed Cash Reserve'), ('variable', 'Variable Cash Reserve')], max_length=50, verbose_name='Cash Maintenance Strategy')),
                ('reserve_amount', models.FloatField(blank=True, help_text='The fixed cash reserve amount, if applicable.', null=True, verbose_name='Reserve Amount')),
                ('reserve_months', models.PositiveIntegerField(blank=True, help_text='The number of months of cash to maintain in reserve.', null=True, verbose_name='Reserve Months')),
                ('description', models.TextField(blank=True, help_text='Description of the template for documentation purposes.', null=True, verbose_name='Template Description')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'verbose_name': 'Cash Configuration Template',
                'verbose_name_plural': 'Cash Configuration Templates',
            },
        ),
        migrations.CreateModel(
            name='Command',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('action', models.CharField(max_length=255, verbose_name='Action')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='CommandSequence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('ordering_type', models.CharField(choices=[('predefined', 'Predefined'), ('custom', 'Custom')], default='custom', max_length=50, verbose_name='Ordering Type')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommandSequenceCommand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(verbose_name='Order')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('command', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='command_instances', to='main.command')),
                ('sequence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sequence_commands', to='main.commandsequence')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('sequence', 'command')},
            },
        ),
        migrations.AddField(
            model_name='commandsequence',
            name='commands',
            field=models.ManyToManyField(related_name='command_sequences', through='main.CommandSequenceCommand', to='main.command', verbose_name='Commands'),
        ),
        migrations.CreateModel(
            name='Debt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('principal', models.FloatField(help_text='The total debt amount.', verbose_name='Principal Amount')),
                ('interest_rate', models.FloatField(help_text='Annual interest rate as a percentage.', verbose_name='Interest Rate')),
                ('payment_minimum', models.FloatField(blank=True, help_text='The minimum required payment.', null=True, verbose_name='Minimum Payment')),
                ('payment_strategy', models.CharField(choices=[('fixed', 'Fixed Payment'), ('minimum_payment', 'Minimum Payment'), ('maximum_payment', 'Maximum Payment'), ('percentage_of_debt', 'Percentage of Debt')], max_length=50, verbose_name='Payment Strategy')),
                ('payment_fixed_amount', models.FloatField(blank=True, help_text='The fixed payment amount, if applicable.', null=True, verbose_name='Fixed Payment Amount')),
                ('payment_percentage', models.FloatField(blank=True, help_text='Percentage of debt to pay each period, if applicable.', null=True, verbose_name='Payment Percentage')),
                ('frequency', models.CharField(choices=[('monthly', 'Monthly'), ('weekly', 'Weekly'), ('biweekly', 'Biweekly'), ('quarterly', 'Quarterly'), ('annual', 'Annual'), ('one_time', 'One Time')], max_length=50, verbose_name='Frequency')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'verbose_name': 'Debt Configuration',
                'verbose_name_plural': 'Debt Configurations',
            },
        ),
        migrations.CreateModel(
            name='DebtTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('principal', models.FloatField(help_text='The total debt amount.', verbose_name='Principal Amount')),
                ('interest_rate', models.FloatField(help_text='Annual interest rate as a percentage.', verbose_name='Interest Rate')),
                ('payment_minimum', models.FloatField(blank=True, help_text='The minimum required payment.', null=True, verbose_name='Minimum Payment')),
                ('payment_strategy', models.CharField(choices=[('fixed', 'Fixed Payment'), ('minimum_payment', 'Minimum Payment'), ('maximum_payment', 'Maximum Payment'), ('percentage_of_debt', 'Percentage of Debt')], max_length=50, verbose_name='Payment Strategy')),
                ('payment_fixed_amount', models.FloatField(blank=True, help_text='The fixed payment amount, if applicable.', null=True, verbose_name='Fixed Payment Amount')),
                ('payment_percentage', models.FloatField(blank=True, help_text='Percentage of debt to pay each period, if applicable.', null=True, verbose_name='Payment Percentage')),
                ('frequency', models.CharField(choices=[('monthly', 'Monthly'), ('weekly', 'Weekly'), ('biweekly', 'Biweekly'), ('quarterly', 'Quarterly'), ('annual', 'Annual'), ('one_time', 'One Time')], max_length=50, verbose_name='Frequency')),
                ('description', models.TextField(blank=True, help_text='Description of the template for documentation purposes.', null=True, verbose_name='Template Description')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'verbose_name': 'Debt Configuration Template',
                'verbose_name_plural': 'Debt Configuration Templates',
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('amount', models.FloatField(help_text='The expense amount.', verbose_name='Amount')),
                ('growth_rate', models.FloatField(help_text='The growth rate.', verbose_name='Growth Rate')),
                ('expense_type', models.CharField(choices=[('fixed', 'Fixed'), ('variable', 'Variable')], max_length=50, verbose_name='Expense Type')),
                ('frequency', models.CharField(choices=[('monthly', 'Monthly'), ('weekly', 'Weekly'), ('biweekly', 'Biweekly'), ('quarterly', 'Quarterly'), ('annual', 'Annual'), ('one_time', 'One Time')], max_length=50, verbose_name='Frequency')),
                ('is_essential', models.BooleanField(default=False, help_text='Whether the expense is essential.', verbose_name='Is Essential')),
                ('grows_with_inflation', models.BooleanField(default=False, help_text='Whether the expense grows with inflation.', verbose_name='Grows with Inflation')),
                ('is_tax_deductible', models.BooleanField(default=False, help_text='Whether the expense is tax-deductible.', verbose_name='Is Tax Deductible')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'verbose_name': 'Expense Configuration',
                'verbose_name_plural': 'Expense Configurations',
            },
        ),
        migrations.CreateModel(
            name='ExpenseTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('amount', models.FloatField(help_text='The expense amount.', verbose_name='Amount')),
                ('growth_rate', models.FloatField(help_text='The growth rate.', verbose_name='Growth Rate')),
                ('expense_type', models.CharField(choices=[('fixed', 'Fixed'), ('variable', 'Variable')], max_length=50, verbose_name='Expense Type')),
                ('frequency', models.CharField(choices=[('monthly', 'Monthly'), ('weekly', 'Weekly'), ('biweekly', 'Biweekly'), ('quarterly', 'Quarterly'), ('annual', 'Annual'), ('one_time', 'One Time')], max_length=50, verbose_name='Frequency')),
                ('is_essential', models.BooleanField(default=False, help_text='Whether the expense is essential.', verbose_name='Is Essential')),
                ('grows_with_inflation', models.BooleanField(default=False, help_text='Whether the expense grows with inflation.', verbose_name='Grows with Inflation')),
                ('is_tax_deductible', models.BooleanField(default=False, help_text='Whether the expense is tax-deductible.', verbose_name='Is Tax Deductible')),
                ('description', models.TextField(blank=True, help_text='Description of the template for documentation purposes.', null=True, verbose_name='Template Description')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'verbose_name': 'Expense Configuration Template',
                'verbose_name_plural': 'Expense Configuration Templates',
            },
        ),
        migrations.CreateModel(
            name='GlossaryTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('term', models.CharField(max_length=255, verbose_name='Glossary Term')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('definition', models.TextField(blank=True, verbose_name='Definition')),
                ('body', models.TextField(blank=True, null=True, verbose_name='Body')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='main.glossaryterm')),
                ('related_terms', models.ManyToManyField(related_name='related_to', to='main.glossaryterm', verbose_name='Related Terms')),
            ],
            options={
                'verbose_name': 'Glossary Term',
                'verbose_name_plural': 'Glossary Terms',
            },
        ),
        migrations.CreateModel(
            name='Hsa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('growth_rate', models.FloatField(help_text='Annual growth rate as a percentage', verbose_name='Growth Rate')),
                ('initial_balance', models.FloatField(help_text='Initial balance in the investment account', verbose_name='Initial Balance')),
                ('contribution_strategy', models.CharField(choices=[('fixed', 'Fixed')], default='fixed', max_length=50, verbose_name='Contribution Strategy')),
                ('contribution_fixed_amount', models.FloatField(blank=True, help_text='Fixed amount contributed annually', null=True, verbose_name='Contribution Fixed Amount')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'verbose_name': 'HSA ',
                'verbose_name_plural': 'HSAs ',
            },
        ),
        migrations.CreateModel(
            name='Income',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('gross_income', models.FloatField(help_text='The total annual gross income.', verbose_name='Gross Income')),
                ('growth_rate', models.FloatField(help_text='Annual growth rate as a percentage.', verbose_name='Growth Rate')),
                ('income_type', models.CharField(choices=[('ordinary', 'Ordinary')], default='ordinary', max_length=50, verbose_name='Income Type')),
                ('frequency', models.CharField(choices=[('monthly', 'Monthly'), ('weekly', 'Weekly'), ('biweekly', 'Biweekly'), ('quarterly', 'Quarterly'), ('annual', 'Annual'), ('one_time', 'One Time')], default='annual', max_length=50, verbose_name='Frequency')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'verbose_name': 'Income Configuration',
                'verbose_name_plural': 'Income Configurations',
            },
        ),
        migrations.CreateModel(
            name='IncomeTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('gross_income', models.FloatField(help_text='The total annual gross income.', verbose_name='Gross Income')),
                ('growth_rate', models.FloatField(help_text='Annual growth rate as a percentage.', verbose_name='Growth Rate')),
                ('income_type', models.CharField(choices=[('ordinary', 'Ordinary')], default='ordinary', max_length=50, verbose_name='Income Type')),
                ('frequency', models.CharField(choices=[('monthly', 'Monthly'), ('weekly', 'Weekly'), ('biweekly', 'Biweekly'), ('quarterly', 'Quarterly'), ('annual', 'Annual'), ('one_time', 'One Time')], default='annual', max_length=50, verbose_name='Frequency')),
                ('description', models.TextField(blank=True, help_text='Description of the template for documentation purposes.', null=True, verbose_name='Template Description')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'verbose_name': 'Income Configuration Template',
                'verbose_name_plural': 'Income Configuration Templates',
            },
        ),
        migrations.CreateModel(
            name='Ira',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('growth_rate', models.FloatField(help_text='Annual growth rate as a percentage.', verbose_name='Growth Rate')),
                ('initial_balance', models.FloatField(help_text='Initial balance in the IRA account.', verbose_name='Initial Balance')),
                ('contribution_strategy', models.CharField(choices=[('fixed', 'Fixed'), ('percentage_of_income', 'Percentage of Income'), ('max', 'Max')], default='fixed', max_length=50, verbose_name='Contribution Strategy')),
                ('contribution_percentage', models.FloatField(blank=True, help_text='Percentage of income contributed annually.', null=True, verbose_name='Contribution Percentage')),
                ('contribution_fixed_amount', models.FloatField(blank=True, help_text='Fixed amount contributed annually.', null=True, verbose_name='Contribution Fixed Amount')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
                ('income', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.income', verbose_name='Income')),
            ],
            options={
                'verbose_name': 'IRA  Configuration',
                'verbose_name_plural': 'IRA  Configurations',
            },
        ),
        migrations.CreateModel(
            name='IraTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('growth_rate', models.FloatField(help_text='Annual growth rate as a percentage.', verbose_name='Growth Rate')),
                ('initial_balance', models.FloatField(help_text='Initial balance in the IRA account.', verbose_name='Initial Balance')),
                ('contribution_strategy', models.CharField(choices=[('fixed', 'Fixed'), ('percentage_of_income', 'Percentage of Income'), ('max', 'Max')], default='fixed', max_length=50, verbose_name='Contribution Strategy')),
                ('contribution_percentage', models.FloatField(blank=True, help_text='Percentage of income contributed annually.', null=True, verbose_name='Contribution Percentage')),
                ('contribution_fixed_amount', models.FloatField(blank=True, help_text='Fixed amount contributed annually.', null=True, verbose_name='Contribution Fixed Amount')),
                ('description', models.TextField(blank=True, help_text='Description of the template for documentation purposes.', null=True, verbose_name='Template Description')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'verbose_name': 'IRA  Configuration Template',
                'verbose_name_plural': 'IRA  Configuration Templates',
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('age', models.PositiveIntegerField(blank=True, default=30, null=True, verbose_name='Age')),
                ('year', models.PositiveIntegerField(blank=True, default=2025, null=True, verbose_name='Year')),
                ('inflation_rate', models.FloatField(help_text='Annual inflation rate as a percentage.', verbose_name='Inflation Rate')),
                ('insufficient_funds_strategy', models.CharField(choices=[('none', 'None'), ('minimum_only', 'Minimum Only'), ('full', 'Full')], default='none', max_length=50, verbose_name='Insufficient Funds Strategy')),
                ('growth_application_strategy', models.CharField(choices=[('start', 'Start'), ('end', 'End')], default='start', max_length=50, verbose_name='Growth Application Strategy')),
                ('life_expectancy', models.PositiveIntegerField(help_text='Estimated life expectancy in years.', verbose_name='Life Expectancy')),
                ('retirement_strategy', models.CharField(choices=[('debt_free', 'Debt-Free'), ('age', 'Age-Based'), ('percent_rule', 'Percentage Rule'), ('target_savings', 'Target Savings')], max_length=50, verbose_name='Retirement Strategy')),
                ('retirement_withdrawal_rate', models.FloatField(help_text='Annual withdrawal rate as a percentage.', null=True, verbose_name='Retirement Withdrawal Rate')),
                ('retirement_income_goal', models.FloatField(help_text='Annual income goal during retirement.', null=True, verbose_name='Retirement Income Goal')),
                ('retirement_age', models.PositiveIntegerField(default=75, help_text='The age at which retirement starts.', verbose_name='Retirement Age')),
                ('retirement_savings_amount', models.FloatField(help_text='Initial savings amount at the time of retirement.', null=True, verbose_name='Retirement Savings Amount')),
                ('retirement_income_adjusted_for_inflation', models.BooleanField(default=True, help_text='Inflation adjusted for inflation.', verbose_name='Retirement Income Adjusted For Inflation')),
                ('tax_strategy', models.CharField(choices=[('simple', 'Simple')], default='simple', max_length=50, verbose_name='Tax Strategy')),
                ('tax_rate', models.FloatField(help_text='Applicable tax rate as a percentage.', verbose_name='Tax Rate')),
                ('brokerages', models.ManyToManyField(related_name='plans', to='main.brokerage', verbose_name='Brokerage  Configurations')),
                ('cash_reserves', models.ManyToManyField(related_name='plans', to='main.cashreserve', verbose_name='Cash Configuration')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('debts', models.ManyToManyField(related_name='plans', to='main.debt', verbose_name='Debt Configurations')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
                ('expenses', models.ManyToManyField(related_name='plans', to='main.expense', verbose_name='Expense Configurations')),
                ('hsas', models.ManyToManyField(related_name='plans', to='main.hsa', verbose_name='Hsas')),
                ('incomes', models.ManyToManyField(related_name='plans', to='main.income', verbose_name='Income Configurations')),
                ('iras', models.ManyToManyField(related_name='plans', to='main.ira', verbose_name='IRAs')),
            ],
            options={
                'verbose_name': 'Plan Configuration',
                'verbose_name_plural': 'Plan Configurations',
            },
        ),
        migrations.AddField(
            model_name='commandsequence',
            name='plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='command_sequences', to='main.plan', verbose_name='Plan'),
        ),
        migrations.CreateModel(
            name='RothIra',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('growth_rate', models.FloatField(help_text='Annual growth rate as a percentage.', verbose_name='Growth Rate')),
                ('initial_balance', models.FloatField(help_text='Initial balance in the IRA account.', verbose_name='Initial Balance')),
                ('contribution_strategy', models.CharField(choices=[('fixed', 'Fixed'), ('percentage_of_income', 'Percentage of Income'), ('max', 'Max')], default='fixed', max_length=50, verbose_name='Contribution Strategy')),
                ('contribution_percentage', models.FloatField(blank=True, help_text='Percentage of income contributed annually.', null=True, verbose_name='Contribution Percentage')),
                ('contribution_fixed_amount', models.FloatField(blank=True, help_text='Fixed amount contributed annually.', null=True, verbose_name='Contribution Fixed Amount')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
                ('income', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.income', verbose_name='Income')),
            ],
            options={
                'verbose_name': 'Roth IRA  Configuration',
                'verbose_name_plural': 'Roth IRA  Configurations',
            },
        ),
        migrations.AddField(
            model_name='plan',
            name='roth_iras',
            field=models.ManyToManyField(related_name='plans', to='main.rothira', verbose_name='Roth IRAs'),
        ),
        migrations.CreateModel(
            name='RothIraTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('growth_rate', models.FloatField(help_text='Annual growth rate as a percentage.', verbose_name='Growth Rate')),
                ('initial_balance', models.FloatField(help_text='Initial balance in the IRA account.', verbose_name='Initial Balance')),
                ('contribution_strategy', models.CharField(choices=[('fixed', 'Fixed'), ('percentage_of_income', 'Percentage of Income'), ('max', 'Max')], default='fixed', max_length=50, verbose_name='Contribution Strategy')),
                ('contribution_percentage', models.FloatField(blank=True, help_text='Percentage of income contributed annually.', null=True, verbose_name='Contribution Percentage')),
                ('contribution_fixed_amount', models.FloatField(blank=True, help_text='Fixed amount contributed annually.', null=True, verbose_name='Contribution Fixed Amount')),
                ('description', models.TextField(blank=True, help_text='Description of the template for documentation purposes.', null=True, verbose_name='Template Description')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'verbose_name': 'Roth IRA  Configuration Template',
                'verbose_name_plural': 'Roth IRA  Configuration Templates',
            },
        ),
        migrations.CreateModel(
            name='TaxDeferred',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('growth_rate', models.FloatField(help_text='Annual growth rate as a percentage.', verbose_name='Growth Rate')),
                ('initial_balance', models.FloatField(help_text='Initial balance in the tax-deferred investment account.', verbose_name='Initial Balance')),
                ('elective_contribution_strategy', models.CharField(choices=[('none', 'None'), ('until_company_match', 'Until Company Match'), ('percentage_of_income', 'Percentage of Income'), ('fixed', 'Fixed'), ('max', 'Max')], max_length=50, verbose_name='Elective Contribution Strategy')),
                ('elective_contribution_percentage', models.FloatField(blank=True, help_text='Percentage of income contributed annually.', null=True, verbose_name='Elective Contribution Percentage')),
                ('elective_contribution_fixed_amount', models.FloatField(blank=True, help_text='Fixed amount contributed annually.', null=True, verbose_name='Elective Contribution Fixed Amount')),
                ('employer_contributes', models.BooleanField(default=False, help_text='Whether the employer contributes to the account.', verbose_name='Employer Contributes')),
                ('employer_contribution_strategy', models.CharField(blank=True, choices=[('none', 'None'), ('percentage_of_contribution', 'Percentage of Contribution'), ('percentage_of_compensation', 'Percentage of Compensation'), ('fixed', 'Fixed')], max_length=50, null=True, verbose_name='Employer Contribution Strategy')),
                ('employer_compensation_match_percentage', models.FloatField(blank=True, help_text='Percentage of compensation matched by the employer.', null=True, verbose_name='Employer Compensation Match Percentage')),
                ('employer_contribution_fixed_amount', models.FloatField(blank=True, help_text='Fixed amount contributed by the employer annually.', null=True, verbose_name='Employer Contribution Fixed Amount')),
                ('employer_match_percentage', models.FloatField(blank=True, help_text='Percentage of employee contributions matched by the employer.', null=True, verbose_name='Employer Match Percentage')),
                ('employer_match_percentage_limit', models.FloatField(blank=True, help_text='Limit on the percentage of employee contributions matched by the employer.', null=True, verbose_name='Employer Match Percentage Limit')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
                ('income', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.income', verbose_name='Income')),
            ],
            options={
                'verbose_name': 'Tax-Deferred  Configuration',
                'verbose_name_plural': 'Tax-Deferred  Configurations',
            },
        ),
        migrations.AddField(
            model_name='plan',
            name='tax_deferreds',
            field=models.ManyToManyField(related_name='plans', to='main.taxdeferred', verbose_name='Tax-Deferred  Configurations'),
        ),
        migrations.CreateModel(
            name='TaxDeferredTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('growth_rate', models.FloatField(help_text='Annual growth rate as a percentage.', verbose_name='Growth Rate')),
                ('initial_balance', models.FloatField(help_text='Initial balance in the tax-deferred investment account.', verbose_name='Initial Balance')),
                ('elective_contribution_strategy', models.CharField(choices=[('none', 'None'), ('until_company_match', 'Until Company Match'), ('percentage_of_income', 'Percentage of Income'), ('fixed', 'Fixed'), ('max', 'Max')], max_length=50, verbose_name='Elective Contribution Strategy')),
                ('elective_contribution_percentage', models.FloatField(blank=True, help_text='Percentage of income contributed annually.', null=True, verbose_name='Elective Contribution Percentage')),
                ('elective_contribution_fixed_amount', models.FloatField(blank=True, help_text='Fixed amount contributed annually.', null=True, verbose_name='Elective Contribution Fixed Amount')),
                ('employer_contributes', models.BooleanField(default=False, help_text='Whether the employer contributes to the account.', verbose_name='Employer Contributes')),
                ('employer_contribution_strategy', models.CharField(blank=True, choices=[('none', 'None'), ('percentage_of_contribution', 'Percentage of Contribution'), ('percentage_of_compensation', 'Percentage of Compensation'), ('fixed', 'Fixed')], max_length=50, null=True, verbose_name='Employer Contribution Strategy')),
                ('employer_compensation_match_percentage', models.FloatField(blank=True, help_text='Percentage of compensation matched by the employer.', null=True, verbose_name='Employer Compensation Match Percentage')),
                ('employer_contribution_fixed_amount', models.FloatField(blank=True, help_text='Fixed amount contributed by the employer annually.', null=True, verbose_name='Employer Contribution Fixed Amount')),
                ('employer_match_percentage', models.FloatField(blank=True, help_text='Percentage of employee contributions matched by the employer.', null=True, verbose_name='Employer Match Percentage')),
                ('employer_match_percentage_limit', models.FloatField(blank=True, help_text='Limit on the percentage of employee contributions matched by the employer.', null=True, verbose_name='Employer Match Percentage Limit')),
                ('description', models.TextField(blank=True, help_text='Description of the template for documentation purposes.', null=True, verbose_name='Template Description')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
            ],
            options={
                'verbose_name': 'Tax-Deferred  Configuration Template',
                'verbose_name_plural': 'Tax-Deferred  Configuration Templates',
            },
        ),
        migrations.CreateModel(
            name='PlanTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('age', models.PositiveIntegerField(blank=True, null=True, verbose_name='Age')),
                ('year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Year')),
                ('inflation_rate', models.FloatField(blank=True, help_text='Annual inflation rate as a percentage.', null=True, verbose_name='Inflation Rate')),
                ('insufficient_funds_strategy', models.CharField(choices=[('none', 'None'), ('minimum_only', 'Minimum Only'), ('full', 'Full')], default='none', max_length=50, verbose_name='Insufficient Funds Strategy')),
                ('brokerage_investment_templates', models.ManyToManyField(blank=True, related_name='plan_templates', to='main.brokeragetemplate', verbose_name='Brokerage  Templates')),
                ('cash_reserve_templates', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='plan_templates', to='main.cashreservetemplate', verbose_name='Cash Template')),
                ('creator', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('debt_templates', models.ManyToManyField(blank=True, related_name='plan_templates', to='main.debttemplate', verbose_name='Debt Templates')),
                ('editor', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, on_update=True, related_name='edited_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Editor')),
                ('expense_templates', models.ManyToManyField(blank=True, related_name='plan_templates', to='main.expensetemplate', verbose_name='Expense Templates')),
                ('income_templates', models.ManyToManyField(blank=True, related_name='plan_templates', to='main.incometemplate', verbose_name='Income Templates')),
                ('ira_investment_templates', models.ManyToManyField(blank=True, related_name='plan_templates', to='main.iratemplate', verbose_name='IRA  Templates')),
                ('roth_ira_investment_templates', models.ManyToManyField(blank=True, related_name='plan_templates', to='main.rothiratemplate', verbose_name='Roth IRA  Templates')),
                ('tax_deferred_investment_templates', models.ManyToManyField(blank=True, related_name='plan_templates', to='main.taxdeferredtemplate', verbose_name='Tax-Deferred  Templates')),
            ],
            options={
                'verbose_name': 'Plan Template',
                'verbose_name_plural': 'Plan Templates',
            },
        ),
        migrations.AddIndex(
            model_name='commandsequence',
            index=models.Index(fields=['created_at'], name='main_comman_created_8243a2_idx'),
        ),
        migrations.AddIndex(
            model_name='commandsequence',
            index=models.Index(fields=['edited_at'], name='main_comman_edited__96b184_idx'),
        ),
        migrations.AddIndex(
            model_name='commandsequence',
            index=models.Index(fields=['creator'], name='main_comman_creator_e01514_idx'),
        ),
        migrations.AddIndex(
            model_name='commandsequence',
            index=models.Index(fields=['editor'], name='main_comman_editor__095406_idx'),
        ),
    ]
